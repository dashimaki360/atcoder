#!/usr/bin/env python3
import sys, math ,heapq, bisect
from collections import deque
from termios import VT1
sys.setrecursionlimit(10**6)
def I(): return int(sys.stdin.readline().rstrip())
def LI(): return list(map(int,sys.stdin.readline().rstrip().split()))
def S(): return sys.stdin.readline().rstrip()
def LS(): return list(sys.stdin.readline().rstrip().split())
def yes(): print("Yes")
def no(): print("No")
MOD = 998244353
INF = 10**18

from collections import defaultdict

class UnionFind():
    def __init__(self, n):
        self.n = n
        self.parents = [-1] * n

    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x])
            return self.parents[x]

    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)
        if x == y:
            return
        if self.parents[x] > self.parents[y]:
            x, y = y, x
        self.parents[x] += self.parents[y]
        self.parents[y] = x

    def size(self, x):
        return -self.parents[self.find(x)]


class Fenwick_Tree:
    def __init__(self, n):
        self._n = n
        self.data = [0] * n

    def add(self, p, x):
        assert 0 <= p < self._n
        p += 1
        while p <= self._n:
            self.data[p - 1] += x
            p += p & -p

    def sum(self, l, r):
        assert 0 <= l <= r <= self._n
        return self._sum(r) - self._sum(l)

    def _sum(self, r):
        s = 0
        while r > 0:
            s += self.data[r - 1]
            r -= r & -r
        return s


# USE SAMPLE
    # n = 8 
    # a = [0, 1, 2, 3, 4, 5, 6, 7]
    # fw = Fenwick_Tree(n)
    # for i, a_i in enumerate(a): fw.add(i, a_i)  # 数列aで初期化
    # print(fw.sum(2, 4))  # 5
    # print(fw.sum(6, 7))  # 6 sum(i, i + 1)でa[i]が得られる
    # fw.add(2, 6)  # a[2] += 6
    # a[2] += 6
    # fw.add(5, -1)  # a[5] += -1
    # a[5] += -1
    # print(a)  # [0, 1, 8, 3, 4, 4, 6, 7]
    # print(fw.sum(0, 3))  # 9
    # print(fw.sum(3, 7))  # 17

amb = "Ambiguous"
n = I()
q = I()

uf = UnionFind(n)
A = Fenwick_Tree(n)

for _ in range(q):
    t,x,y,v = LI()
    x -= 1
    y -= 1
    if t == 0:
        uf.union(x,y)
        if A.sum(x,x+1) != 0: continue
        if x & 1 == 0:
            A.add(x,v)
        else:
            A.add(x,-v)

    else:
        if uf.find(x) != uf.find(y):
            print(amb)
            continue
        if x < y:
            tmp = A.sum(x,y)
        else:
            tmp = A.sum(y,x)
        if min(x,y) & 1:
            tmp = -tmp

        if (y-x) & 1 == 0:
            if x > y:
                ans = v + tmp
            else:
                ans = v - tmp
        else:
            ans = tmp - v
        print(ans)
    
"""
x1 + x2 = v1
x2 = v1 - x1
x2 + x3 = v2
x3 + x4 = v3
x1 + (v2-x3) = v1
x3 = x1 - (v1 - v2)
v3 - x4 = x1 - (v1-v2)
x4 = (v1 - v2 + v3) - x1
"""